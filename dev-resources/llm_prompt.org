Hello! As a senior data engineer with nine years of industry
experience in tech I feel I need to practice my algorithmic skills to
keep them sharp and stay relevant. I have used Clojure for almost
eight years before I picked up on Python so I am still discovering the
type hints and useful modules.

Today I am considering the following problem statement:

#+BEGIN_QUOTE

#+END_QUOTE

Could you outline solutions in some of the most relevant algorithmic
design paradigms? Here are some I can think about, but please don't
feel limited if there are some better fits.

- Backtracking
- Branch and bound
- Brute-force search
- Divide and conquer
- Dynamic programming (both bottom-up and top-down)
- Greedy algorithm
- Recursion
- Prune and search

I am interested to read how they work, why they might be a good fit,
and learn on their time and space complexities? Being able to see the
fundamental structure that can be transferred across, and applied on,
different problems, would be very welcome.

Besides algorithmic design paradigm, using some different data
structures as relevant would be most helpful. Here are some
suggestions, but don't feel constrained:

- Array
- Associative array
- Binary search tree
- Fenwick tree
- Graph
- Hash table
- Heap
- Linked list
- Queue
- Segment tree
- Stack
- String
- Tree
- Trie

Finally I'm especially interested to see the most efficient algorithm for space, time, or both, whatever the paradigm or implementation.
