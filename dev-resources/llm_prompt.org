Hello! As a senior data engineer with nine years of industry
experience in tech, I feel I need to practise my algorithmic skills to
keep them sharp and stay relevant. I have used Clojure for almost
eight years before I picked up on Python, so I am still discovering
the type hints and useful modules.

Today I am considering the following problem statement:

#+BEGIN_QUOTE
{{ problem_statement }}
#+END_QUOTE

Could you outline solutions in some of the most relevant algorithmic
design paradigms? Here are some I can think about, but please don't
feel limited if there are some better fits.

- Backtracking;
- Branch and bound;
- Brute-force search;
- Divide and conquer;
- Dynamic programming (I'm especially interested in both bottom-up and
  top-down to see the differences and similarities);
- Greedy algorithm;
- Recursion;
- Prune and search.
