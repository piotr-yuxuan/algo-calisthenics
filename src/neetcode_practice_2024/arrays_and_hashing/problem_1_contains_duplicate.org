#+TITLE:Contains duplicate
#+PROPERTY: header-args :tangle problem_1_contains_duplicate.py
#+STARTUP: latexpreview

#+BEGIN_QUOTE
Given an integer array =nums=, return =true= if any value appears more
than once in the array, otherwise return =false=.
#+END_QUOTE

* Initial considerations

A very naive way to do it is to iterate over every array item,
comparing it to all subsequent items: the first loop is $O(n)$, and
for every item we do it $O(n)$, which leads to a time complexity of
$O(n^2)$. This might seem high, however the space complexity is $O(1)$
because no memory is used.

Another way to do it is first to sort the array, and then iterate over
the values by shifting one by one on the right. The time complexity of
merge sort is $O(n \times \log n)$, and its space complexity is
$O(n)$ with $n$ being the length of the array.

* Chosen solution

As of now the best way I can think to solve this array is to use a
set. We iterate over the array and for each items we test if the value
is in the set, then if not we insert it.

- Time complexity in the worst case (no duplicates) is $O(n)$ because
  we iterate over the array.
- Space complexity in the same worst case: $O(n)$ because we
  add every item in the set.
