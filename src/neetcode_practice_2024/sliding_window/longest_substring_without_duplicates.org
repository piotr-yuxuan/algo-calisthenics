#+TITLE:Longest Substring Without Repeating Characters
#+PROPERTY: header-args :tangle longest_substring_without_duplicates.py
#+STARTUP: latexpreview
#+URL:

#+BEGIN_QUOTE
Given a string =s=, find the length of the longest substring without
duplicate characters.

A substring is a contiguous sequence of characters within a string.
#+END_QUOTE

* Initial considerations

As usual I will start with a brute force implementation in
$\mathcal{O}(n^2)$ that tries all the possible substrings, assess
whether they match the criterion, and track the longest one.

This brute force implementation basically ensures correctness of
further implementations, and goes well with the generative testing
approach.

Then I will use a sliding window to traverse the string only once,
keeping track of the caracters currently part of the string and their
latest position. As the traversal progresses, whenever we stumble
already in the current window we shrink it by moving the left bound to
the right just enough to exclude that character, and then we continue
expanding the window by shifting the right bound toward the right.

** On the intuitive solution

I got stuck for an unreasonably long time because of the update of
=known_positions= was below the =else= condition of the duplicate
handling. As a lesson learnt, I should always run the algorithm in my
head in the happy case to make sure that the implementation matches
what I had in mind. Perhaps jotting down some blueprint comments would
also help?

* Chosen solution

As of now the best way I can think of is the intuitive approach I had
with a sliding window and a hash table. We need a linear space
complexity for storing the position of the unique characters.

- Time complexity (average / best / worst): $\mathcal{O}(n)$
- Space complexity (average / best / worst): $\mathcal{O}(n)$

* Further elaboration

- Implement using two pointers. It would be a nice exercice that
  wouldn't improve the actual runtime or conceptual complexity. While
  not exotic it would be elegant if implemented properly.
- Optimise for space by exploring more compact data structures.
- Allow $k$ duplicates: Expand the problem to accommodate $k$
  duplicate characters in substrings.
- Return the top $k$ substring lengths.

Obviously the top $k$ substrings would involve maintaining a heap
property over a table as the most efficient way. That would be
actually good to practice an on-the-rock / al-fresco heap
implementation.
