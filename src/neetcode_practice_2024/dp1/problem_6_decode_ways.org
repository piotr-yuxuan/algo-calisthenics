#+TITLE:Decode ways
#+PROPERTY: header-args :tangle problem_6_decode_ways.py
#+STARTUP: latexpreview
#+URL: https://chatgpt.com/c/679cce3c-aca4-800e-a3ff-0edd34d78647

#+BEGIN_QUOTE
A string consisting of uppercase english characters can be encoded to
a number using the following mapping:

- 'A' -> "1"
- 'B' -> "2"
...
- 'Z' -> "26"

To decode a message, digits must be grouped and then mapped back into
letters using the reverse of the reversemapping above. There may be
multiple ways to decode a message. For example, ="1012"= can be mapped
into:

- ="JAB"= with the grouping $(10 1 2)$
- ="JL"= with the grouping $(10 12)$

The grouping $(1 01 2)$ is invalid because $01$ cannot be mapped into
a letter since it contains a leading zero.

Given a string =s= containing only digits, return the number of ways
to decode it. You can assume that the answer fits in a 32-bit integer.
#+END_QUOTE

* Initial considerations

So, for a position $i$ in a string $s$, we can return =s[i]= if the
value within the inclusive range of $[1, 9]$ or =s[i:i+2]== if in the
inclusive range of $[10, 26]$.

Let's call =is_valid_decode= the predicate that takes a string =s= and
return whether yes or no it is a valid, decodable value.

Pushing it further, for a position $i$ of string =s= the number of
different, valid ways to decode =s= is: $\left(1 +
f(s[i:i+1])\right) + f(s[i:i+2])$, the left term of the addition being
only counted under the condition that =s[i:i+1]= is a valid string,
and the right term being counted only if =s[i:i+2]= if valid.

This looks like a recurrent relation. Let's explore each possible
subproblem.

I got tricked by the definition on =valid_one= that I thought would
simply be =range(10)= whilst zero is explicitly discarded in the
problem statement.

* Chosen solution

As of now the best way I can think ofâ€¦

- Time complexity (average / best / worst): $\mathcal{O}(n)$
- Space complexity (average / best / worst): $\mathcal{O}(n)$

* Further elaboration

- Use an approach based on linear algebra, it doesn't seem so
  difficult once written down, and it's probably how real-life dynamic
  programming is implemented anyway on large problems I guess.
- Count decodings with a wildcard ('*' for 1-9);
- Return all valid decodings instead of counting them;
- Find the lexicographically smallest decoding;
- Optimise for long inputs with a stream-based approach.
