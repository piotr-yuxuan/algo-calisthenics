#+TITLE:Longest Palindromic Substring
#+PROPERTY: header-args :tangle problem_4_longest_palindromic_substring.py
#+STARTUP: latexpreview
#+URL:

#+BEGIN_QUOTE
Given a string =s=, return the longest substring of =s= that is a
palindrome.

A palindrome is a string that reads the same forward and backward.

If there are multiple palindromic substrings that have the same
length, return any one of them.
#+END_QUOTE

* Initial considerations

I was eager to dive into dynamic programming because I thought it was
only about finding recurrence relations, and exhibiting clever space
optimisation tricks. However, here I can't really see the linear
recurrence, what a pity!

As usual now, let's start with the brute force solution, see how
complex it is, and then we can apply hopefully some dynamic
programming approach.

* Chosen solution

As of now the best way I can think ofâ€¦

- Time complexity (average / best / worst): $\mathcal{O}(n)$
- Space complexity (average / best / worst): $\mathcal{O}(1)$
