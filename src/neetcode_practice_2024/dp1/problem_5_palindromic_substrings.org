#+TITLE:Palindromic Substrings
#+PROPERTY: header-args :tangle problem_5_palindromic_substrings.py
#+STARTUP: latexpreview
#+URL:

#+BEGIN_QUOTE
Given a string =s=, return the number of substrings within =s= that
are palindromes.

A palindrome is a string that reads the same forward and backward.
#+END_QUOTE

* Initial considerations

Hum, it turns out that a lot of problems in this dynamic programming
section turn out to be two pointer solutions. Let's see if I can
reimplement it correctly.

The idea here is to walk through the centres of possible palindromes,
expand selection with two pointers, and count how many strings are
valid palindroms.

We could also modify the Manacher's algorithm but for this I should
first understand it. That's definitely an algorithm tthat seems
interesting to learn!

I left a partial implementation for odd-length palindromes for
reference to the future reader.

* Chosen solution

As of now the best way I can think ofâ€¦

- Time complexity (average / best / worst): $\mathcal{O}(n)$
- Space complexity (average / best / worst): $\mathcal{O}(1)$

#+BEGIN_SRC python
#+END_SRC
