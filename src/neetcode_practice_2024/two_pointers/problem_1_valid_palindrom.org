#+TITLE:Valid Palindrome
#+PROPERTY: header-args :tangle problem_1_valid_palindrom.py
#+STARTUP: latexpreview
#+URL: https://chatgpt.com/c/6790fd9e-ce8c-800e-9dfc-740a244d1b00

#+BEGIN_QUOTE
Given a string $s$, return $true$ if it is a palindrome, otherwise
return $false$.

A palindrome is a string that reads the same forward and backward. It
is also case-insensitive and ignores all non-alphanumeric characters.
#+END_QUOTE

* Initial considerations

My instinct is to use to pointers from the first and last position of
the string and slide them by one until they join or a difference is
spotted. Another implementation for the same algorithm is to say the
result for a string is the comparison of the two characters and the
logical conjunction (=AND=) with the result of a recursive call to the
inner string.

Othewise we could try a stack, which is still a different
implementation variety of the same strategy: comparing the caracters
at the two ends, and progressing inwards.

* Chosen solution

As of now the best way I can think of is the simple two-pointer loop:

- Time complexity (average / best / worst): $\mathcal{O}(n)$
- Space complexity (average / best / worst): $\mathcal{O}(1)$

I have left behind the alpha-numeric filter. It could be done in a
linear complexity time with something along the lines of:

#+BEGIN_SRC python
[c for c in 'aze ?:' if c.isalnum()]
#+END_SRC

* Further elaboration

An interesting way to broaden this problem is to ask for the longest
palindromes within this string. All of a sudden it makes obvious that
while the initial case let different implementation choices appear
similar (two pointers, recursion on the inner string), actually the
two-pointer solution is indeed the simplest for a given string, and
the recursion-based approach looks like dynamic programming: as we
reuse smaller problems, it'd be a bottom-up approach.

Because we want to record whether the string between $input[i]$ and
input[j]$, both included, is a palindrom, it's a bit cumbersome to
iterate the loops with $i$ and $j$ from 0. We use the length for that.
