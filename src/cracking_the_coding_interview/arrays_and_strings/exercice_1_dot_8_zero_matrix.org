#+TITLE:Exercice 1.8: Rotate matrix
#+PROPERTY: header-args :tangle exercice_1_dot_8_zero_matrix.clj

#+BEGIN_QUOTE
Zero Matrix: Write an algorithm such that if an element in an MxN
matrix is 0, its entire row and column are set to 0.
#+END_QUOTE

#+BEGIN_SRC clojure
(ns cracking-the-coding-interview.arrays-and-strings.exercice-1-dot-8-zero-matrix
  (:require [clojure.test :refer [deftest is]]))
#+END_SRC

Well, once again it's likely we won't achieve any time complexity
better than $O(m \times n)$. However it must be pretty possible to use
$O(1)$ additionnal space complexity.

Quick reminder: I talk about additionnal space complexity and not
total memory complexity, which would include the input size as well as
the stack frames.

In this exercice I will no longer suffer pain and write transient
datastructures. I will optimistically rely on Clojure handling of
immutable datastructure which is said to make efficient use of
structural sharing.

This means that different datastructures, one made of the other, will
actually refer to the same memory locations they
share. "Optimistically" here means I assume the garbage collector to
be perfectly efficient.

#+NAME: zero_matrix_test
#+BEGIN_SRC clojure :tangle no
(deftest zero-matrix-test
  (let [object [[1 2 3 4]
                [5 6 7 8]
                [9 1 2 3]]]
    (is (= object (zero-matrix object 3 4))))
  (is (= (zero-matrix [[1 2 0 4]
                       [5 6 7 8]
                       [9 1 2 3]]
                      3
                      4)
         [[0 0 0 0]
          [5 6 0 8]
          [9 1 0 3]]))
  (is (= (zero-matrix [[1 0 3 4]
                       [5 6 0 8]
                       [9 1 2 3]]
                      3
                      4)
         [[0 0 0 0]
          [0 0 0 0]
          [9 0 0 3]])))
#+END_SRC

Here is the core algorithm. The closure ~zero-matrix-recur~ only has
arguments about recursion. It's not completely pure as its behaviour
depends on its parent function ~zero-matrix-recur-fn~ but using a map
this way seems to me to make each recursion step clearer to read.

#+BEGIN_SRC clojure :noweb strip-export
<<ancillary_zero_functions>>

(defn zero-matrix-recur-fn
  [matrix m]
  (fn zero-matrix-recur [{:keys [output-matrix sites zeroed-i? zeroed-j?] :as args}]
    (let [[[i j]] sites]
      (cond (nil? sites) output-matrix

            (and (not (zeroed-i? i))
                 (zero? (get-in matrix [i j])))
            #(zero-matrix-recur (assoc args
                                  :output-matrix (zero-i output-matrix m i)
                                  :zeroed-i? (conj zeroed-i? i)))

            (and (not (zeroed-j? j))
                 (zero? (get-in matrix [i j])))
            #(zero-matrix-recur (assoc args
                                  :output-matrix (zero-j output-matrix m j)
                                  :zeroed-j? (conj zeroed-j? j)))

            :default
            #(zero-matrix-recur (assoc args :sites (next sites)))))))

(defn zero-matrix
  [matrix m n]
  (trampoline (zero-matrix-recur-fn matrix m)
              {:output-matrix matrix
               :sites (for [i (range m), j (range n)] [i j]) ;; lazy sequence
               :zeroed-i? #{}
               :zeroed-j? #{}}))

<<zero_matrix_test>>
#+END_SRC

#+NAME: ancillary_zero_functions
#+BEGIN_SRC clojure :tangle no
(defn zero-i
  [matrix m i]
  (assoc matrix i (vec (repeat (inc m) 0))))

(defn zero-j
  [matrix m j]
  (reduce (fn [acc i]
            (assoc-in acc [i j] 0))
          matrix
          (range m)))
#+END_SRC

The time complexity is $O(m \times n)$ at most to store
=output-matrix= if all sites must be changed so structural complexity
if of no help.
