#+TITLE:Exercice 1.4: Palindrome permutation
#+PROPERTY: header-args :tangle exercice_1_dot_4_palindrome_permutation.clj

#+BEGIN_QUOTE
Palindrome Permutation: Given a string, write a function to check if
it is a permutation of a palindrome. A palindrome is a word or phrase
that is the same forwards and backwards. A permutation is a
rearrangement of letters. The palindrome does not need to be limited
to just dictionary words.
#+END_QUOTE

Spaces are ignored in a palindrome.

We merely need to remember characters which count are odd. The
worst-case time complexity is $O(n)$, $n$ being the length of the
string. The additional space complexity is also $O(n)$. Clojure
standard function ~trampoline~ avoids stack consumption. It's a work
around JVM lack of tail call elimination.

#+BEGIN_SRC clojure
(ns cracking-the-coding-interview.arrays-and-strings.exercice-1-dot-4-palindrome-permutation
  (:require [clojure.test :refer [deftest is]]
            [clojure.string :as str]))

(defn palindrome-permutation
  [[i & s] odd-seen?]
  (cond (nil? i) (<= (count odd-seen?) 1)
        (= \space i) #(palindrome-permutation s odd-seen?)
        (odd-seen? i) #(palindrome-permutation s (disj! odd-seen? i))
        :default #(palindrome-permutation s (conj! odd-seen? i))))

(def response #(trampoline palindrome-permutation % (transient #{})))

(deftest response-test
  (is (not (response "azfe   a")))
  (is (response "aze   a z"))
  (is (response "zazea")))
#+END_SRC
