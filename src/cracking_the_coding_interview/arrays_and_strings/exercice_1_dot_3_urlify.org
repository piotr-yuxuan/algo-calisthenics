#+TITLE:Exercice 1.3: URLify
#+PROPERTY: header-args :tangle exercice_1_dot_3_urlify.clj

#+BEGIN_QUOTE
URLify: Write a method to replace all spaces in a string with
'%20'. You may assume that the string has sufficient space at the end
to hold the additional characters, and that you are given the "true"
length of the string. (Note: If implementing in Java, please use a
character array so that you can perform this operation in place.)
#+END_QUOTE

I will use a string buffer for in-place edition and be more
JVM-idiomatic. Reminder: in Java as in Clojure, strings are litterals,
hence immutable. A StringBuilder contains a mutable string.

#+BEGIN_SRC clojure
(ns cracking-the-coding-interview.arrays-and-strings.exercice-1-dot-3-urlify
  (:require [clojure.test :refer [deftest is]]
            [clojure.string :as str]))

(defn urlify
  [s l]
  (let [builder (StringBuilder. ^String s)]
    (loop [i 0]
      (when (= \space (.charAt builder i))
        (doto builder
          (.deleteCharAt i)
          (.insert i "%20")))
      (if (= i l)
        (.toString builder)
        (recur (inc i))))))

(def response urlify)

(deftest response-test
  (let [actual "Mr John Smith"
        expected "Mr%20John%20Smith"]
    (is (= (response actual (count actual))
           expected))))
#+END_SRC

The time complexity is $O(n)$ and the additional space complexity is
$O(n)$ too.
