#+TITLE:Exercice 4.2: Minimal tree
#+PROPERTY: header-args :tangle exercice_4_dot_2_minimal_tree.clj

#+BEGIN_QUOTE
Minimal Tree: Given a sorted (increasing order) array with unique
integer elements, write an algorithm to create a binary search tree
with minimal height.
#+END_QUOTE

#+BEGIN_SRC clojure
(ns cracking-the-coding-interview.trees-and-graphs.exercice-4-dot-2-minimal-tree
  (:require [clojure.test :refer [deftest is]]
            [clojure.string :as str]))
#+END_SRC

I will use divide and conquer. I represent a binary tree with nested
vectors of one, two, or three elements which stand for a single leaf,
a root and its single leaf, and a root surrounded by its two leaves.

#+BEGIN_SRC clojure
(defn increasing-order
  [a]
  (cond (< 2 (count a)) (vector (increasing-order (subvec a 0 (/ (count a) 2)))
                                (nth a (/ (count a) 2))
                                (increasing-order (subvec a (inc (/ (count a) 2)) (count a))))
        (= 2 (count a)) a
        (= 1 (count a)) (first a)))

(deftest increasing-order-test
  (is (= [[1 2 3] 4 [5 6]]
         (increasing-order [1 2 3 4 5 6]))))
#+END_SRC

You split the input vector of size $n$ in 2 parts until you get $n$
parts that are simple enough parts to be solved directly. This amounts
to $O(n \log n)$ worst-case time complexity.

Now it might be desirable to obtain a proper adjacency map as output
because this is usually more common when dealing with directed graph.
