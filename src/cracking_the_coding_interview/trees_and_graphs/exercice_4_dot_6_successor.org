#+TITLE:Exercice 4.6: Successor
#+PROPERTY: header-args :tangle exercice_4_dot_6_successor.clj

#+BEGIN_QUOTE
Successor: Write an algorithm to find the "next" node (i.e., in-order
successor) of a given node in a binary search tree. You may assume
that each node has a link to its parent.
#+END_QUOTE

#+BEGIN_SRC clojure
(ns cracking-the-coding-interview.trees-and-graphs.exercice-4-dot-6-successor
  (:require [clojure.test :refer [deftest is]]))
#+END_SRC

As far as I know before writing any new code, it may involve a kind of
in-order tree traversal. Let's write its definition in code:

#+BEGIN_SRC clojure
(defn tree-traversal
  [traversal tree root]
  (lazy-seq
   (if-let [[left right] (get tree root)]
     (lazy-cat (when (= traversal :traversal/pre-order) (list root))
               (tree-traversal traversal tree left)
               (when (= traversal :traversal/in-order) (list root))
               (tree-traversal traversal tree right)
               (when (= traversal :traversal/post-order) (list root)))
     (list root))))

(deftest tree-traversal-test
  (is (= (range 1 8)
         (let [t {1 [2 5], 2 [3 4], 5 [6 7], :root 1}] (tree-traversal :traversal/pre-order t (:root t)))
         (let [t {2 [1 3], 4 [2 6], 6 [5 7], :root 4}] (tree-traversal :traversal/in-order t (:root t)))
         (let [t {3 [1 2], 6 [4 5], 7 [3 6], :root 7}] (tree-traversal :traversal/post-order t (:root t))))))
#+END_SRC

This tree traversal implementation takes advantages of Clojure
built-in laziness. The full sequence of tree node isn't realized until
needed. You can convince yourself by reading the doc of ~lazy-cat~ or
adding a ~println~.

The time complexity is $O(h)$ with $h$ being the height of the tree.

This means we need an efficient way to retrieve a node parent for any
node of the graph. [[https://twitter.com/mark_woodworth][Mark Woodworth]] being a gentleman and a scholar, he
was kind enough to chat with me and get this concise [[https://twitter.com/mark_woodworth/status/1151183022923714560][snippet]]:

#+BEGIN_SRC clojure
(def reverse-graph
  #(apply merge-with clojure.set/union (for [[k vs] % v vs] {v #{k}})))
#+END_SRC

This code not being mine I am free to say I find it very elegant.

#+BEGIN_SRC clojure
(defn- successor
  [tree node]
  (let [parent (comp first (reverse-graph (dissoc tree :root)))]
    (if-let [right (last (get tree node))]
      (->> (iterate (comp first tree) right)
           (take-while some?)
           last)
      (->> (iterate parent node)
           (take-while some?)
           (partition 2 1)
           (some (fn [[n p]] (when (= n (first (get tree p))) p)))))))

(deftest successor-test
  (let [t {2 [1 3], 4 [2 6], 6 [5 7], :root 4}]
    (is (= 2 (successor t 1)))
    (is (= 3 (successor t 2)))
    (is (= 4 (successor t 3)))
    (is (= 5 (successor t 4)))
    (is (= 6 (successor t 5)))
    (is (= 7 (successor t 6)))
    (is (not (successor t 7)))))
#+END_SRC
